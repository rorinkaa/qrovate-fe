// src/components/AdvancedQRBuilder.jsx
import React, { useState, useEffect } from 'react';
import { api, API } from '../api'; // API base + helper adds Authorization header

export default function AdvancedQRBuilder() {
  // input for creating/updating the dynamic QR
  const [target, setTarget] = useState('https://example.com');

  // the currently created/selected QR (server returns: { id, owner, target, scanCount, blockedCount })
  const [currentQR, setCurrentQR] = useState(null);

  // ui state
  const [loading, setLoading] = useState(false);
  const [msg, setMsg] = useState('');
  const [err, setErr] = useState('');

  // create new dynamic QR (requires you to be logged in and have token saved)
  async function handleCreate() {
    setErr(''); setMsg(''); setLoading(true);
    try {
      // server validates target must be full http(s) URL
      const res = await api('/qr/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ target })
      });
      setCurrentQR(res);
      setMsg('Dynamic QR created.');
    } catch (e) {
      setErr(e.message || 'Failed to create QR');
    } finally {
      setLoading(false);
    }
  }

  // update target of current QR (keeps same id)
  async function handleUpdate() {
    if (!currentQR?.id) return;
    setErr(''); setMsg(''); setLoading(true);
    try {
      const res = await api('/qr/update', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: currentQR.id, target })
      });
      setCurrentQR(res);
      setMsg('QR updated.');
    } catch (e) {
      setErr(e.message || 'Failed to update QR');
    } finally {
      setLoading(false);
    }
  }

  // refresh stats (scanCount etc.) by refetching your list and locating the same id
  async function refreshStats() {
    if (!currentQR?.id) return;
    setErr(''); setMsg('');
    try {
      const list = await api('/qr/list'); // returns your QRs [{id, target, scanCount...}]
      const found = list.find(q => q.id === currentQR.id);
      if (found) {
        setCurrentQR(found);
        setMsg('Stats refreshed.');
      } else {
        setErr('This QR was not found in your list.');
      }
    } catch (e) {
      setErr(e.message || 'Failed to refresh stats');
    }
  }

  // convenience: build URLs only when we have an id
  const svgUrl  = currentQR?.id ? `${API}/qr/svg/${currentQR.id}` : '';
  const openUrl = currentQR?.id ? `${API}/qr/${currentQR.id}`     : '';

  return (
    <div style={{ display: 'grid', gap: 12 }}>
      <h3>Dynamic QR (editable)</h3>

      <input
        type="text"
        value={target}
        onChange={e => setTarget(e.target.value)}
        placeholder="https://your-target-url"
        style={{ padding: 10, borderRadius: 8, border: '1px solid #ccc' }}
      />

      <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
        <button onClick={handleCreate} disabled={loading} style={btnStyle}>
          {loading ? 'Please waitâ€¦' : 'Create Dynamic QR'}
        </button>

        <button onClick={handleUpdate} disabled={!currentQR?.id || loading} style={btnStyleAlt}>
          Update
        </button>
      </div>

      {/* Preview + Open link */}
      {currentQR?.id && (
        <div style={{ display: 'flex', alignItems: 'center', gap: 14 }}>
          {/* SVG preview generated by backend using the QR id */}
          <img
            src={svgUrl}
            alt="qr"
            width={80}
            height={80}
            style={{ borderRadius: 6, border: '1px solid #eee' }}
            onError={() => setErr('Could not load QR preview (check CORS/CORP headers).')}
          />

          {/* Open goes through backend: /qr/:id (redirect to current target) */}
          <a href={openUrl} target="_blank" rel="noreferrer">Open</a>

          {/* Editable target input stays bound to current state */}
          <input
            type="text"
            value={target}
            onChange={e => setTarget(e.target.value)}
            placeholder="https://your-target-url"
            style={{ flex: 1, padding: 10, borderRadius: 8, border: '1px solid #ccc' }}
          />
        </div>
      )}

      {/* Stats + refresh */}
      {currentQR?.id && (
        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
          <button onClick={refreshStats} style={btnStyle}>Refresh stats</button>
          <span style={badgeStyle}>Scans: {currentQR?.scanCount ?? 0}</span>
          {typeof currentQR?.blockedCount === 'number' && (
            <span style={badgeGrey}>Blocked: {currentQR.blockedCount}</span>
          )}
          <span style={{ color: '#666' }}>
            ID: <code>{currentQR.id}</code>
          </span>
        </div>
      )}

      {/* Messages */}
      {msg && <div style={{ color: '#0a7', fontSize: 13 }}>{msg}</div>}
      {err && <div style={{ color: '#d33', fontSize: 13 }}>{err}</div>}

      {/* Helper: if no QR yet, a tiny hint */}
      {!currentQR?.id && (
        <div style={{ color: '#666', fontSize: 13 }}>
          Tip: after logging in, enter a full <code>https://</code> URL and click <b>Create Dynamic QR</b>.
        </div>
      )}
    </div>
  );
}

/* tiny inline styles so you can paste this file as-is */
const btnStyle = {
  padding: '10px 14px',
  borderRadius: 10,
  border: '1px solid #2a66ff',
  background: '#2a66ff',
  color: '#fff',
  cursor: 'pointer'
};

const btnStyleAlt = {
  ...btnStyle,
  border: '1px solid #777',
  background: '#fff',
  color: '#333'
};

const badgeStyle = {
  padding: '4px 8px',
  borderRadius: 10,
  background: '#fee2e2',
  color: '#b91c1c',
  fontSize: 12
};

const badgeGrey = {
  padding: '4px 8px',
  borderRadius: 10,
  background: '#e5e7eb',
  color: '#374151',
  fontSize: 12
};
